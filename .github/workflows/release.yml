name: Build and Release
on:
  push:
    tags:
      - v*

jobs:

  getversion:
    runs-on: ubuntu-latest
    name: Read package.json version
    outputs:
      is_release: ${{ steps.vstep.outputs.is_release }}
      version: ${{ steps.vstep.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Read version
        id: vstep
        run: |
          PACKAGE_VERSION=$(cat ./package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
          IS_RELEASE=$([[ $PACKAGE_VERSION =~ ^([0-9]+).([0-9]+).([0-9]+)$ ]] && echo 'true' || echo 'false')
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

  build_and_export:
    runs-on: ubuntu-latest
    name: Build, Export, Release
    needs: getversion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build and Export Next Application
        run: |
          npm run build

      - name: Build Debian Package
        run: npm run package-debian
        env:
          PKG_NAME: ${{ secrets.RNBO_DEB_PKG_NAME }}
          PKG_VERSION: ${{ needs.getversion.outputs.version }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.getversion.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "*.deb"

      - name: Upload deb file
        uses: actions/upload-artifact@v4
        with:
          name: deb
          path: "*.deb"

  publish_apt:
    runs-on: [self-hosted, Linux, x64, digitalocean]
    needs: [build_and_export, getversion]
    steps:
      - name: Download deb file
        uses: actions/download-artifact@v4
        with:
          name: deb

      - name: Add to RELEASE aptly and publish
        if: ${{ needs.getversion.outputs.is_release == 'true' }}
        shell: bash
        run: |
          aptly repo add bookworm-rpi rnbo-runner-panel_${{ needs.getversion.outputs.version }}.deb
          aptly publish update -batch -passphrase=${{ secrets.APTLY_GPG_PASSWORD }} bookworm s3:c74:

      - name: Add to BETA aptly and publish
        if: ${{ needs.getversion.outputs.is_release == 'false' }}
        shell: bash
        run: |
          aptly repo add bookworm-rpi-beta rnbo-runner-panel_${{ needs.getversion.outputs.version }}.deb
          aptly publish update -batch -passphrase=${{ secrets.APTLY_GPG_PASSWORD }} bookworm s3:c74:

  publish_conan:
    runs-on: [self-hosted, Linux, x64, digitalocean]
    needs: [getversion]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      # Install Conan
      - name: Install Conan
        run: |
          pip install conan==1.61.0

      - name: Build Conan Package
        run: npm run package-conan
        env:
          PKG_VERSION: ${{ needs.getversion.outputs.version }}

      - name: Publish Conan Package
        shell: bash
        run: |
          conan remote add cycling ${{secrets.C74_CONAN_REMOTE_URL}}
          conan user -r cycling -p ${{secrets.C74_CONAN_PASSWORD}} ${{secrets.C74_CONAN_USER}}
          conan upload -r cycling --all rnborunnerpanel/${{ needs.getversion.outputs.version }}@c74/testing
